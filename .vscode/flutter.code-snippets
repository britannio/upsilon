{
	// Place your reflection_flutter workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"Part statement": {
		"prefix": "pts",
		"body": [
			"part '${TM_FILENAME_BASE}.g.dart';",
		],
		"description": "Creates a filled-in part statement"
	},
	"Part 'Freezed' statement": {
		"prefix": "ptf",
		"body": [
			"part '${TM_FILENAME_BASE}.freezed.dart';",
		],
		"description": "Creates a filled-in freezed part statement"
	},
	"Freezed Data Class": {
		"prefix": "fdataclass",
		"body": [
			"@immutable",
			"@freezed",
			"class ${1:DataClass} with _$${1:DataClass}{",
			"  const factory ${1:DataClass}(${2}) = _${1:DataClass};",
			"}"
		],
		"description": "Freezed Data Class"
	},
	"Freezed Union": {
		"prefix": "funion",
		"body": [
			"@immutable",
			"@freezed",
			"class ${1:Union} with _$${1:Union}{",
			"  const factory ${1:Union}.${2}(${4}) = ${3};",
			"}"
		],
		"description": "Freezed Union"
	},
	"Freezed Union Case": {
		"prefix": "funioncase",
		"body": [
			"const factory ${1:Union}.${2}(${4}) = ${3};"
		],
		"description": "Freezed Union Case"
	},
}